{"name":"I18njs","tagline":"Simplistic I18N tool for universal/isomorphic Javascript.","body":"## Usage with RequireJS\r\n\r\nTo use with **[RequireJS](http://requirejs.org)** I'd advise to also use the plugin\r\n[requirejs-i18njs](https://github.com/yoannmoinet/requirejs-i18njs) to be able to precompile the templates\r\nthat are in your translation files for your production code.\r\n\r\n----\r\n\r\n## Usage with Handlebars\r\n\r\nYou can register your helper simply by using the `.get()` function of i18njs\r\n\r\n```javascript\r\nHandlebars.registerHelper('i18n',\r\n    function () {\r\n        return i18njs.get.apply(i18njs, arguments);\r\n    }\r\n);\r\n```\r\n\r\nthen in your templates :\r\n\r\n```javascript\r\n// Arguments after the 'key' are optionals\r\n{{i18n 'key' data options lang}}\r\n```\r\n\r\n----\r\n\r\n## Installation\r\n\r\nEither\r\n\r\n```node\r\nnpm install --save i18njs\r\n```\r\n\r\nor\r\n\r\n```node\r\nbower install --save i18njs\r\n```\r\n----\r\n\r\n## Usage\r\n\r\nImport it the way you want into your project :\r\n\r\n```javascript\r\n// CommonJS\r\nvar i18njs = require('i18njs');\r\n```\r\n\r\n```javascript\r\n// AMD\r\ndefine(['i18njs'], function (i18njs) {\r\n    // use i18njs\r\n});\r\n```\r\n\r\n```html\r\n// Global\r\n<script type=\"text/javascript\" src=\"./dist/i18njs.min.js\"></script>\r\n<script type=\"text/javascript\">\r\n    // use i18njs\r\n</script>\r\n```\r\n\r\n### Add locales\r\n\r\nYour localized strings are simple json objects.\r\n\r\nNamespaces can be as deep as you need.\r\n\r\n```javascript\r\n\r\nvar en_locales = {\r\n    'hello_world': {\r\n        'hello': 'Hello',\r\n        'world': 'World'\r\n    }\r\n};\r\n\r\nvar fr_locales = {\r\n    'hello_world': {\r\n        'hello': 'Bonjour',\r\n        'world': 'Monde'\r\n    }\r\n};\r\n\r\n// i18n.add(language, [namespace,] locales);\r\ni18n.add('en', 'first_level_namespace', en_locales);\r\ni18n.add('fr', 'first_level_namespace', fr_locales);\r\n\r\n```\r\n\r\n### Change language\r\n\r\nBy default, language is set to `en`.\r\n\r\n```javascript\r\n\r\ni18n.setLang('fr');\r\n\r\n```\r\n\r\n### Get current language\r\n\r\n```javascript\r\n\r\ni18n.getCurrentLang();\r\n\r\n```\r\n\r\n### Get dictionary\r\n\r\n```javascript\r\n\r\ni18n.getDico();\r\n\r\n```\r\n### Check for availability\r\n\r\nIf needed, you can also check for the presence of a specific localized string in a particular language.\r\n\r\nYou can check only the language too.\r\n\r\n ```javascript\r\n // i18n.has([key,] lang)\r\n i18n.has('first_level_namespace.hello_world.hello', 'en');\r\n // true\r\n\r\n i18n.has('first_level_namespace.hello_world.hello');\r\n // true\r\n\r\n i18n.has('en');\r\n // true\r\n\r\n  i18n.has('de');\r\n  // false\r\n\r\n  i18n.has('hello_world.bye', 'en');\r\n  // false\r\n\r\n  i18n.has('test');\r\n  // false\r\n ```\r\n\r\n### List available languages\r\n\r\n```javascript\r\n\r\ni18n.listLangs();\r\n// ['en', 'fr']\r\n\r\n```\r\n\r\n### Get basic localized string\r\n\r\n```javascript\r\n\r\n// i18n.get(key[, data, options][, lang]);\r\ni18n.get('first_level_namespace.hello_world.hello');\r\n// Hello\r\n\r\ni18n.get('first_level_namespace.hello_world.hello', 'fr');\r\n// Bonjour\r\n\r\n```\r\n\r\n### Get templated string\r\n\r\nIt uses a basic templating engine, the same as [underscore](http://underscorejs.org/#template).\r\n\r\nIt works in the form of `{{=interpolate}}`, `{{evaluate}}` or `{{-escape}}` :\r\n\r\n```javascript\r\n// localized strings\r\nvar en_locales = {\r\n    'st': '{{=interpolate}}{{for(var i = 0, max = 5; i < max; i += 1) {}} to{{}}} {{-escape}}'\r\n};\r\n\r\n// context used in the templated string\r\nvar data = {\r\n    'interpolate': 'Hello',\r\n    'escape': '\\'<the>\\' `&` \"World\"'\r\n};\r\n\r\n// register the localized string\r\ni18n.add('en', en_locales);\r\n\r\n// give it a context with the data object\r\nvar st = i18n.get('st', data);\r\n// \"Hello  to to to to to &#x27;&lt;the&gt;&#x27; &#x60;&amp;&#x60; &quot;World&quot;\"\r\n\r\n```\r\n\r\n### Change delimiters\r\n\r\nYou can also change delimiters by passing the third `options` arguments\r\n\r\n```javascript\r\n\r\nvar st = i18n.get('st', data, {\r\n    evaluate: /<%([\\s\\S]+?)%>/g;\r\n    interpolate: /<%=([\\s\\S]+?)%>/g;\r\n    escape: /<%-([\\s\\S]+?)%>/g;\r\n});\r\n\r\n```\r\n\r\nWill result in these delimiters `<%=interpolate%>`, `<%evaluate%>` or `<%-escape%>`\r\n\r\n### Add default values for templates\r\n\r\nIf you need to have a special key always replaced by the same value (a brand for example),\r\nyou can set it as a **default**.\r\n\r\nThis `key` will be then replaced across your application's localized strings and you\r\nwon't need to pass it as a context object to your `.get()`.\r\n\r\n```javascript\r\nvar fr = {\r\n    welcome: 'Bienvenue sur {{=brand}}'\r\n};\r\n\r\nvar en = {\r\n    welcome: 'Welcome to {{=brand}}'\r\n};\r\n\r\nvar defaults = {\r\n    fr: {\r\n        brand: 'Ma Marque'\r\n    },\r\n    en: {\r\n        brand: 'My Brand'\r\n    }\r\n};\r\n\r\ni18n.add('fr', fr);\r\ni18n.add('en', en);\r\ni18n.setDefaults(defaults);\r\n\r\ni18n.get('welcome')\r\n//Welcome to My Brand\r\n```\r\n\r\nYou don't have to use localized defaults if you don't need to :\r\n\r\n```javascript\r\nvar defaults = {\r\n    brand: 'My Brand'\r\n};\r\n\r\ni18n.setDefaults(defaults);\r\ni18n.setLang('fr');\r\n\r\ni18n.get('welcome');\r\n//Bienvenue sur My Brand\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}